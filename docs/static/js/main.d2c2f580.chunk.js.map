{"version":3,"sources":["../../src/index.js","content.js","components/githubFork.js","components/layout.js","pages/landingPage.js","App.js","serviceWorker.js","index.js"],"names":["RootComponent","isOpen","height","className","React","prevProps","prevState","wasOpen","this","snapshot","children","duration","timingFunc","styleConfig","styleObj","onTransitionEnd","ref","style","PureComponent","PropTypes","string","createContent","line","str","arr","index","push","gitHubFork","href","class","aria-label","width","viewBox","fill","color","position","top","border","right","aria-hidden","d","transformOrigin","Layout","margin","maxWidth","padding","paddingTop","App","useState","flag","setFlag","flag1","setFlag1","flag2","setFlag2","showCode","setCodeFlag","showCode1","setCodeFlag1","showCode2","setCodeFlag2","useEffect","setTimeout","Prism","highlightAll","src","alt","onClick","content","htmlcode1","htmlcode2","htmlcode3","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2c2f580.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\n\r\nclass RootComponent extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.itemRef = React.createRef();\r\n        this.state = {\r\n            height: 0,\r\n            className: \"close\",\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        isOpen: PropTypes.bool.isRequired,\r\n        children: PropTypes.any,\r\n        duration: PropTypes.string,\r\n        timingFunc: PropTypes.string,\r\n    };\r\n\r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        const { isOpen: wasOpen } = prevProps;\r\n        const { isOpen } = this.props;\r\n        let className;\r\n        if (isOpen !== wasOpen) {\r\n            if (isOpen) {\r\n                className = \"opening\";\r\n            } else {\r\n                className = \"closing\";\r\n            }\r\n            return {\r\n                className,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setHeight = () => {\r\n        const { isOpen } = this.props;\r\n        const ele = this.itemRef.current;\r\n        const height = ele.scrollHeight;\r\n        this.setState({ height: isOpen ? height : 0 });\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (snapshot !== null) {\r\n            this.setState(\r\n                {\r\n                    ...snapshot,\r\n                },\r\n                this.setHeight,\r\n            );\r\n        }\r\n    }\r\n\r\n    finishTransition = () => {\r\n        const { isOpen } = this.props;\r\n        this.setState({ className: isOpen ? \"open\" : \"close\" });\r\n    };\r\n\r\n    render() {\r\n        const { children, isOpen, duration, timingFunc } = this.props;\r\n        const { height, className } = this.state;\r\n\r\n        const styleConfig = {\r\n            \"--transition-duration\": duration,\r\n            \"--timing-function\": timingFunc,\r\n        };\r\n\r\n        const styleObj = {\r\n            [className === \"close\" || className === \"open\" ? \"\" : \"height\"]: height,\r\n            ...styleConfig,\r\n        };\r\n\r\n        return (\r\n            <div\r\n                className={`react-accordion-comp ${className}`}\r\n                onTransitionEnd={this.finishTransition}\r\n                ref={this.itemRef}\r\n                style={styleObj}\r\n            >\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RootComponent;\r\n","const createContent = (line = 1) => {\r\n    const str = `Nam iaculis ultricies tristique. Phasellus eleifend elit mi, euhendrerit.`\r\n    let arr = [];\r\n    for (let index = 0; index <line; index++) {\r\n        arr.push(str);\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport default createContent;","import React from \"react\";\r\n\r\nconst gitHubFork = () => {\r\n  return (\r\n    <a\r\n      href=\"https://github.com/binodswain/react-faq-component\"\r\n      class=\"github-corner\"\r\n      aria-label=\"View source on GitHub\"\r\n    >\r\n      <svg\r\n        width=\"80\"\r\n        height=\"80\"\r\n        viewBox=\"0 0 250 250\"\r\n        style={{\r\n          fill: \"#151513\",\r\n          color: \"#fff\",\r\n          position: \"absolute\",\r\n          top: 0,\r\n          border: 0,\r\n          right: 0,\r\n        }}\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\r\n        <path\r\n          d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\r\n          fill=\"currentColor\"\r\n          style={{ transformOrigin: \"130px 106px\" }}\r\n          class=\"octo-arm\"\r\n        ></path>\r\n        <path\r\n          d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\r\n          fill=\"currentColor\"\r\n          class=\"octo-body\"\r\n        ></path>\r\n      </svg>\r\n    </a>\r\n  )\r\n}\r\n\r\nexport default gitHubFork","import React, { Fragment } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Fork from \"./githubFork\";\r\nimport \"./layout.css\"\r\nimport \"./index.scss\"\r\n\r\nconst Layout = ({ children }) => {\r\n\r\n    return (\r\n        <>\r\n            <Fork />\r\n            <div\r\n                style={{\r\n                    margin: `0 auto`,\r\n                    maxWidth: 960,\r\n                    padding: `0px 1.0875rem 1.45rem`,\r\n                    paddingTop: 0,\r\n                }}\r\n            >\r\n                <h1>react-accordion-comp</h1>\r\n                <main>{children}</main>\r\n                <footer>\r\n                    MIT &copy; <a href=\"https://github.com/binodswain\">binodswain</a>{\" \"}\r\n                    <br />\r\n                </footer>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nLayout.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout","import React, { useState, useEffect } from 'react';\r\n// import './App.scss';\r\nimport Accordion from \"react-accordion-comp\";\r\nimport content from \"../content\";\r\n// import 'react-accordion-comp/dist/styles.css';\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport Prism from \"prismjs\"\r\n\r\nfunction App() {\r\n    const [flag, setFlag] = useState(false);\r\n    const [flag1, setFlag1] = useState(false);\r\n    const [flag2, setFlag2] = useState(false);\r\n\r\n    const [showCode, setCodeFlag] = useState(false);\r\n    const [showCode1, setCodeFlag1] = useState(false);\r\n    const [showCode2, setCodeFlag2] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // call the highlightAll() function to style our code blocks\r\n        setTimeout(() => {\r\n            Prism.highlightAll()\r\n        }, 0)\r\n    }, [])\r\n\r\n    return (\r\n        <Layout>\r\n            <div className=\"page\">\r\n                <section className=\"badges\">\r\n                    <a href=\"https://www.npmjs.com/package/react-accordion-comp\">\r\n                        <img\r\n                            src=\"https://badgen.net/npm/v/react-accordion-comp\"\r\n                            alt=\"release\"\r\n                        />\r\n                    </a>\r\n                    <a href=\"https://github.com/binodswain/react-accordion-comp/issues\">\r\n                        <img\r\n                            src=\"https://badgen.net/github/open-issues/binodswain/react-accordion-comp\"\r\n                            alt=\"open-issues\"\r\n                        />\r\n                    </a>\r\n                    <a href=\"https://github.com/binodswain/react-accordion-comp/blob/master/LICENSE\">\r\n                        <img\r\n                            src=\"https://badgen.net/github/license/binodswain/react-accordion-comp\"\r\n                            alt=\"license\"\r\n                        />\r\n                    </a>\r\n                    <a href=\"https://github.com/binodswain/react-accordion-comp/actions?query=workflow%3ATest\">\r\n                        <img\r\n                            src=\"https://github.com/binodswain/react-accordion-comp/workflows/Test/badge.svg\"\r\n                            alt=\"test status\"\r\n                        />\r\n                    </a>\r\n                    <a href=\"https://github.com/binodswain/react-accordion-comp/actions?query=workflow%3ABuild\">\r\n                        <img\r\n                            src=\"https://github.com/binodswain/react-accordion-comp/workflows/Build/badge.svg\"\r\n                            alt=\"build status\"\r\n                        />\r\n                    </a>\r\n                </section>\r\n                <h2>Demo</h2>\r\n                <section className=\"demo\">\r\n                    <button onClick={() => setFlag1(!flag1)}>\r\n                        toggle content ( 1s - ease )\r\n                    </button>\r\n\r\n                    <button className=\"code\" onClick={() => setCodeFlag1(!showCode1)}>\r\n                        {!showCode1 ? 'show' : 'hide'} code\r\n                    </button>\r\n\r\n                    <Accordion isOpen={flag1} duration={`1000ms`}>\r\n                        <div className=\"red\">\r\n                            <p>\r\n                                {content()}\r\n                            </p>\r\n                        </div>\r\n                    </Accordion>\r\n\r\n                    <Accordion isOpen={showCode1}>\r\n                        <pre className=\"line-numbers\">\r\n                            <code className=\"language-jsx\">{htmlcode1}</code>\r\n                        </pre>\r\n                    </Accordion>\r\n\r\n                    <hr />\r\n                    <button onClick={() => setFlag2(!flag2)}>\r\n                        toggle content (default)\r\n                    </button>\r\n                    <button className=\"code\" onClick={() => setCodeFlag2(!showCode2)}>\r\n                        {!showCode2 ? 'show' : 'hide'} code\r\n                    </button>\r\n                    <Accordion isOpen={flag2}>\r\n                        <div className=\"red\">\r\n                            <p>\r\n                                {content(3)}\r\n                            </p>\r\n                        </div>\r\n                    </Accordion>\r\n                    <p className=\"with-padding\">\r\n                        {content(3)}\r\n                    </p>\r\n\r\n                    <Accordion isOpen={showCode2}>\r\n                        <pre className=\"line-numbers\">\r\n                            <code className=\"language-jsx\">{htmlcode2}</code>\r\n                        </pre>\r\n                    </Accordion>\r\n\r\n                    <hr />\r\n                    <button onClick={() => setFlag(!flag)}>\r\n                        toggle content ( 5s - linear )\r\n                    </button>\r\n                    <button className=\"code\" onClick={() => setCodeFlag(!showCode)}>\r\n                        {!showCode ? 'show' : 'hide'} code\r\n                    </button>\r\n                    <Accordion isOpen={flag} duration={`5s`} timingFunc={'linear'}>\r\n                        <div className=\"red\">\r\n                            <p>\r\n                                {content(24)}\r\n                            </p>\r\n                        </div>\r\n                    </Accordion>\r\n\r\n                    <div className=\"black with-padding\">\r\n                        <h2>title</h2>\r\n                        <p>\r\n                            {content(12)}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <Accordion isOpen={showCode}>\r\n                        <pre className=\"line-numbers\">\r\n                            <code className=\"language-jsx\">{htmlcode3}</code>\r\n                        </pre>\r\n                    </Accordion>\r\n                </section>\r\n            </div>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\nconst htmlcode1 = `import React, { useState } from 'react';\r\n\r\nfunction App() {\r\n    const [flag, setFlag] = useState(false);\r\n\r\n    return <div>\r\n        <button onClick={() => setFlag(!flag)}>\r\n            toggle content ( 1s - ease )\r\n        </button>\r\n        <Accordion isOpen={flag} duration={\"1000ms\"}>\r\n            <div className=\"red\">\r\n                <p>\r\n                    {content()}\r\n                </p>\r\n            </div>\r\n        </Accordion>\r\n    </div>\r\n}\r\n`\r\n\r\nconst htmlcode2 = `import React, { useState } from 'react';\r\n\r\nfunction App() {\r\n    const [flag, setFlag] = useState(false);\r\n\r\n    return <div>\r\n        <button onClick={() => setFlag(!flag)}>\r\n            toggle content ( 1s - ease )\r\n        </button>\r\n        <Accordion isOpen={flag}>\r\n            <div className=\"red\">\r\n                <p>\r\n                    {content()}\r\n                </p>\r\n            </div>\r\n        </Accordion>\r\n    </div>\r\n}\r\n`\r\n\r\nconst htmlcode3 = `import React, { useState } from 'react';\r\n\r\nfunction App() {\r\n    const [flag, setFlag] = useState(false);\r\n\r\n    return <div>\r\n        <button onClick={() => setFlag(!flag)}>\r\n            toggle content ( 1s - ease )\r\n        </button>\r\n        <Accordion isOpen={flag} duration={'5s'} timingFunc={'linear'}>\r\n            <div className=\"red\">\r\n                <p>\r\n                    {content(24)}\r\n                </p>\r\n            </div>\r\n        </Accordion>\r\n        <div className=\"black with-padding\">\r\n            <h2>title</h2>\r\n            <p>\r\n                {content(12)}\r\n            </p>\r\n        </div>\r\n    </div>\r\n}\r\n`","import React, {useState} from 'react';\r\nimport './App.scss';\r\nimport Accordion from \"react-accordion-comp\";\r\nimport content from \"./content\";\r\n// import 'react-accordion-comp/dist/styles.css';\r\n\r\nimport LandingPage from \"./pages/landingPage\";\r\n\r\nconst isDocs = true;\r\n\r\nfunction App() {\r\n  const [flag, setFlag] = useState(false);\r\n  const [flag1, setFlag1] = useState(false);\r\n  const [flag2, setFlag2] = useState(false);\r\n\r\n  if (isDocs) {\r\n    return (\r\n      <div className=\"\">\r\n        <LandingPage/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container page\">\r\n      <button onClick={()=>setFlag1(!flag1)}>\r\n        toggle content\r\n      </button>\r\n      <Accordion isOpen={flag1} duration={`1000ms`}>\r\n        <div className=\"red\">\r\n          <p>\r\n            {content()}\r\n          </p>\r\n        </div>\r\n      </Accordion>\r\n      <hr/>\r\n      <button onClick={()=>setFlag2(!flag2)}>\r\n        toggle content\r\n      </button>\r\n      <Accordion isOpen={flag2}>\r\n        <div className=\"red\">\r\n          <p>\r\n            {content(3)}\r\n          </p>\r\n        </div>\r\n      </Accordion>\r\n      <p className=\"with-padding\">\r\n        {content(3)}\r\n      </p>\r\n      <hr/>\r\n      <button onClick={()=>setFlag(!flag)}>\r\n        toggle content\r\n      </button>\r\n      <Accordion isOpen={flag} duration={`5s`} timingFunc={'linear'}>\r\n        <div className=\"red\">\r\n          <p>\r\n            {content(24)}\r\n          </p>\r\n        </div>\r\n      </Accordion>\r\n\r\n      <div className=\"green\">\r\n        <h2>title</h2>\r\n        <p>\r\n          {content(12)}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}